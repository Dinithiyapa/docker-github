name: CI/CD Workflow

on:
  push:
    branches:
      - main # Workflow triggers on pushes to this branch

jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout the code
        uses: actions/checkout@v4

      # Step 2: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD}}

      # Step 3: Build and push the Docker image for API
      - name: Build and push API Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/github-actions-api:latest,${{ vars.DOCKER_USERNAME }}/github-actions-api:${{ github.run_number }}

  build-web:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout the code
        uses: actions/checkout@v4

      # Step 2: Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSOWORD }}

      # Step 3: Build and push the Docker image for Web
      - name: Build and push Web Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./web
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/github-actions-web:latest,${{ vars.DOCKER_USERNAME }}/github-actions-web:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build-web, build-api] # Waits for both build-web and build-api to finish
    steps:
      # Step 1: Connect to the remote VM using SSH
      - name: SSH into the server
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ vars.EC2_HOST }}
          username: ${{ vars.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}

      # Step 2: Clone the repository on the server
      - name: Clone the repository
        run: git@github.com:Dinithiyapa/docker-github.git

      # Step 3: Navigate into the repository and remove any running Docker Compose components
      - name: Stop existing Docker Compose components
        run: cd docker-github && docker compose down || true

      # Step 4: Start the application using Docker Compose
      - name: Start Docker Compose
        run: cd docker-github && docker compose up -d
