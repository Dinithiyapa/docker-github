version: '3.8'

services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "4000-4002:4000"
    volumes:
      - ./api:/app
    working_dir: /app
    command: bash -c "npm install && npm start"
    environment:
      - PORT=4000
      - DB=${API_DB}
    depends_on:
      - db
    networks:
      - backend

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "3000-3001:3000"
    volumes:
      - ./web:/app
    working_dir: /app
    command: bash -c "npm install && npm start"
    environment:
      - PORT=3000
      - API_HOST=${API_HOST}
    depends_on:
      - api
    networks:
      - backend

  db:
    image: postgres:9.6
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 5s

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - backend
    depends_on:
      - api
      - web

networks:
  backend:
    driver: bridge

volumes:
  db_data:
